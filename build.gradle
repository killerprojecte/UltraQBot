plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
    id 'java-library'
}

ext {
    bigVersion = '1.0.0'
    releaseType = 'dev'
    // Development (dev); Release (release); Snapshots / Pre-Release (snapshots)
}

group = 'flyproject'
version = version()

repositories {
    mavenCentral()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'fastmcmirror'
        url = 'https://repo.fastmcmirror.org/content/repositories/releases/'
    }
}

dependencies {
    implementation 'com.google.code.gson:gson:2.10.1'
    compileOnly 'org.spigotmc:spigot-api:1.16.5-R0.1-SNAPSHOT'
    implementation 'com.xbaimiao:mirai-http-sdk:1.0.4-beta-9ff255a'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.release = 8
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

shadowJar {
    archiveClassifier = ""
    relocate("com.google.gson", "dev.rgbmc.ultraqbot.libs.gson")
    relocate("kotlin", "dev.rgbmc.ultraqbot.libs.kotlin")
    relocate("kotlinx", "dev.rgbmc.ultraqbot.libs.kotlinx")
    relocate("com.xbaimiao.mirai", "dev.rgbmc.ultraqbot.libs.mirai")
    relocate("org.java_websocket", "dev.rgbmc.ultraqbot.libs.websocket")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "dev.rgbmc"
            artifactId "UltraQBot"
            version = this.version
            artifact shadowJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url = "https://repo.fastmcmirror.org/content/repositories/releases/"
            credentials {
                username System.getenv("USERNAME")
                password System.getenv("PASSWORD")
            }
        }
    }
}

def String id() {
    Process process = Runtime.getRuntime().exec("git rev-parse --short HEAD")
    BufferedReader reader = new BufferedReader(new InputStreamReader(process.inputStream))
    String cid = reader.readLine()
    if (cid==null) {
        println("Make sure you are using a repository fetched via Git before trying to build")
        System.exit(0)
    }
    println("Commit ID: " + cid)
    return cid;
}

def String version() {
    StringBuilder builder = new StringBuilder()
    builder.append(bigVersion)
    if (!releaseType.equalsIgnoreCase("release")) {
        builder.append("-")
        builder.append(releaseType)
        builder.append("-")
        builder.append(id())
    }
    println("Current Version: " + builder.toString())
    return builder.toString()
}